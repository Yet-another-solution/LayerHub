@page "/Manage/Maps/Create"
@using System.Text.Json
@using Community.Blazor.MapLibre.Models
@using Community.Blazor.MapLibre.Models.Camera
@using Community.Blazor.MapLibre.Models.Feature
@using Community.Blazor.MapLibre.Models.Layers
@using Community.Blazor.MapLibre.Models.Sources
@using LayerHub.Shared.Dto.MapLayer
@using LayerHub.Shared.Dto.MapProject
@using LayerHub.Web.Application.Services

@layout ManageLayout

@inject IHttpService HttpService

<h3>Edit</h3>

<div class="d-flex gap-3 flex-sm-row flex-column">
    <div class="col-sm-4">
        <CustomCard>
            <CustomCreateForm T="MapProjectDto"
                              Object="NewMapProjectDto"
                              PostUrl=@("/Project/")>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="nameInput" @bind="NewMapProjectDto.Name">
                    <label for="nameInput">Name:</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="displayNameInput" @bind="NewMapProjectDto.DisplayName">
                    <label for="displayNameInput">Name:</label>
                </div>
                <div class="form-check form-switch mb-3">
                    <input type="checkbox" @bind="NewMapProjectDto.IsPublished" class="form-check-input"/>
                    <label for="displayNameInput" class="form-check-label">Is Published</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="date" @bind="NewMapProjectDto.VisibleStart" class="form-control"/>
                    <label for="displayNameInput">Visible from:</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="date" @bind="NewMapProjectDto.VisibleEnd" class="form-control"/>
                    <label for="displayNameInput">Visible to:</label>
                </div>

                <PaginatedSelect TItem="MapLayerDto"
                                 Class="mb-3"
                                 IsPaginated="true"
                                 IsMultiSelect="true"
                                 ApiUrl="/Layer"
                                 SelectedOptionsChanged="HandleLayersSelected"
                                 DefaultText="Choose layers...">
                    <SelectedOptionsRenderer Context="items">
                        @if (items.Count > 0)
                        {
                            <div class="d-flex flex-row flex-nowrap overflow-hidden">
                                @foreach (var item in items.Take(3))
                                {
                                    <span class="badge bg-light text-dark me-1 text-truncate">
                                    @item.Name
                                </span>
                                }
                                @if (items.Count > 3)
                                {
                                    <span class="badge bg-secondary text-white">+@(items.Count - 3)</span>
                                }
                            </div>
                        }
                    </SelectedOptionsRenderer>
                    <Option Context="item">
                        @item.Name
                    </Option>
                </PaginatedSelect>
            </CustomCreateForm>
        </CustomCard>
    </div>

    <MapLibre @ref="Map" Options="_mapOptions" Class="rounded"
              Height="50vh" @rendermode="InteractiveServer" OnLoad="OnMapLoad"/>
</div>



@code
{
    private MapLibre Map { get; set; } = new MapLibre();

    private readonly MapOptions _mapOptions = new()
    {
        Container = "UniqueMapId",
        Style = "https://tiles.openfreemap.org/styles/liberty",
        Center = new LngLat()
        {
            Latitude = 48.725837,
            Longitude = 18.752835
        },
        Zoom = 14, // Start with a default zoom level
        Pitch = 20
    };

    private async Task OnMapLoad(EventArgs obj)
    {
        try
        {
            await LoadGeoJson();
        }
        catch (Exception)
        {
            // ignored
        }
    }

    [Parameter] public Guid Id { get; set; }

    public NewMapProjectDto NewMapProjectDto { get; set; } = new()
    {
        Name = "",
        DisplayName = "",
        Url = "",
        IsPublished = false,
        VisibleStart = DateTimeOffset.UtcNow
    };

    List<string> layerIds = new();
    private async Task RemoveLayers()
    {
        foreach (var layerId in layerIds)
        {
            try
            {
                await Map.RemoveLayer(layerId);
                await Map.RemoveSource(layerId);
            }
            catch (Exception e)
            {
                // Ignore
            }
        }

        layerIds.RemoveAll(l => true);
    }

    private async Task LoadGeoJson()
    {
        await RemoveLayers();

        foreach (var layerDto in MapLayerDtos)
        {
            await Map.AddSource(layerDto.Id.ToString(), new GeoJsonSource()
            {
                Data = new FeatureCollection()
                {
                    Features = new List<IFeature>(layerDto.MapFeatures.Select(mf => new FeatureFeature()
                    {
                        Geometry = JsonSerializer.Deserialize<IGeometry>(mf.GeometryJson)
                    }))
                }
            });
            
            layerIds.Add(layerDto.Id.ToString());

            await Map.AddLayer(new FillLayer()
            {
                Id = layerDto.Id.ToString(),
                Source = layerDto.Id.ToString(),
                Paint = new FillLayerPaint()
                {
                    FillColor = "#088",
                    FillOpacity = 0.8,
                    FillOutlineColor = "#008888"
                }
            });
        }

        var MapFeatureDtos = MapLayerDtos.SelectMany(ml => ml.MapFeatures.Select(mf => mf))
            .ToList();
        // Get the coordinates from the polygon
        var bounds = new LngLatBounds
        {
            Southwest = JsonSerializer.Deserialize<IGeometry>(MapFeatureDtos.First().GeometryJson).GetBounds().Southwest,
            Northeast = JsonSerializer.Deserialize<IGeometry>(MapFeatureDtos.First().GeometryJson).GetBounds().Northeast,
        };
        foreach (var feature in MapFeatureDtos)
        {
            var geometry = JsonSerializer.Deserialize<IGeometry>(feature.GeometryJson);
            bounds.Extend(geometry.GetBounds());
        }

        // Options for fit bounds
        var fitBoundsOptions = new FitBoundOptions
        {
            Padding = 50, // Add padding around the bounds (in pixels)
            MaxZoom = 19 // Optional: limit max zoom level
        };

        // Fit the map to the bounds
        await Map.FitBounds(bounds, fitBoundsOptions);
    }

    public List<MapLayerDto> MapLayerDtos { get; set; } = new();

    private async Task HandleLayersSelected(List<MapLayerDto> items)
    {
        MapLayerDtos = items;
        NewMapProjectDto.LayerIds = items.Select(i => i.Id).ToList();

        try
        {
            await LoadGeoJson();
        }
        catch (Exception)
        {
            // ignored
        }
    }
}