@page "/Manage/Layers/Create"
@using System.Text.Json
@using Community.Blazor.MapLibre.Models
@using Community.Blazor.MapLibre.Models.Camera
@using Community.Blazor.MapLibre.Models.Feature
@using Community.Blazor.MapLibre.Models.Layers
@using Community.Blazor.MapLibre.Models.Sources
@using LayerHub.Shared.Dto.MapFeature
@using LayerHub.Shared.Dto.MapLayer
@using LayerHub.Web.Application.Services

@layout ManageLayout

@inject IHttpService HttpService

<h3>Edit</h3>

<div class="d-flex gap-3 flex-sm-row flex-column">
    <CustomCard Class="col-sm-4">
        <CustomCreateForm T="MapLayerDto" 
                          Object="NewMapLayerDto"
                          PostUrl=@($"/Feature/")>
            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="nameInput" @bind="NewMapLayerDto.Name">
                <label for="nameInput">Name:</label>
            </div>
            <div class="form-floating mb-3">
                <textarea class="form-control" id="descriptionInput" @bind="NewMapLayerDto.Description" style="height: 90px"></textarea>
                <label for="descriptionInput">Description</label>
            </div>
            
            <PaginatedSelect TItem="MapFeatureDto"
                             Class="mb-3"
                             IsPaginated="true"
                             IsMultiSelect="true"
                             ApiUrl="/Feature"
                             SelectedOptionsChanged="HandleFeaturesSelected"
                             DefaultText="Choose features...">
                <SelectedOptionsRenderer Context="items">
                    @foreach (var item in items)
                    {
                        <span class="badge bg-light text-dark me-1">
                            @item.Name
                        </span>
                    }
                </SelectedOptionsRenderer>
                <Option Context="item">
                    @item.Name
                </Option>
            </PaginatedSelect>
        </CustomCreateForm>
    </CustomCard>
    
    <MapLibre @ref="Map" Options="_mapOptions" Class="rounded"
              Height="30vh" @rendermode="InteractiveServer" OnLoad="OnMapLoad"/>
</div>



@code
{
    private MapLibre Map { get; set; } = new MapLibre();
    
    private readonly MapOptions _mapOptions = new()
    {
        Container = "UniqueMapId",
        Style = "https://tiles.openfreemap.org/styles/liberty",
        Center = new LngLat()
        {
            Latitude = 48.725837, 
            Longitude = 18.752835
        },
        Zoom = 14, // Start with a default zoom level
        Pitch = 20
    };

    private async Task OnMapLoad(EventArgs obj)
    {
        try
        {
            await LoadGeoJson();
        }
        catch (Exception)
        {
            // ignored
        }
    }

    [Parameter] 
    public Guid Id { get; set; }

    public NewMapLayerDto NewMapLayerDto { get; set; } = new()
    {
        Name = ""
    };
    
    private async Task LoadGeoJson()
    {
        try
        {
            await Map.RemoveLayer("GeoJsonLayerId");
            await Map.RemoveSource("maine");
        }
        catch (Exception)
        {
            // ignored
        }

        await Map.AddSource("maine", new GeoJsonSource()
        {
            Data = new FeatureCollection()
            {
                Features = new List<IFeature>(MapFeatureDtos.Select(mf => new FeatureFeature()
                {
                    Geometry = JsonSerializer.Deserialize<IGeometry>(mf.GeometryJson)
                }))
            }
        });

        await Map.AddLayer(new FillLayer()
        {
            Id = "GeoJsonLayerId",
            Source = "maine",
            Paint = new FillLayerPaint()
            {
                FillColor = "#088",
                FillOpacity = 0.8,
                FillOutlineColor = "#008888"
            }
        });

        // Get the coordinates from the polygon
        var bounds = new LngLatBounds
        {
            Southwest = JsonSerializer.Deserialize<IGeometry>(MapFeatureDtos.First().GeometryJson).GetBounds().Southwest,
            Northeast = JsonSerializer.Deserialize<IGeometry>(MapFeatureDtos.First().GeometryJson).GetBounds().Northeast,
        };
        foreach (var feature in MapFeatureDtos)
        {
            var geometry = JsonSerializer.Deserialize<IGeometry>(feature.GeometryJson);
            bounds.Extend(geometry.GetBounds());
        }

        // Options for fit bounds
        var fitBoundsOptions = new FitBoundOptions
        {
            Padding = 50, // Add padding around the bounds (in pixels)
            MaxZoom = 19 // Optional: limit max zoom level
        };

        // Fit the map to the bounds
        await Map.FitBounds(bounds, fitBoundsOptions);
    }

    public List<MapFeatureDto> MapFeatureDtos { get; set; } = new();
    
    private async Task HandleFeaturesSelected(List<MapFeatureDto> items)
    {
        MapFeatureDtos = items;
        try
        {
            await LoadGeoJson();
        }
        catch (Exception)
        {
            // ignored
        }
    }
}