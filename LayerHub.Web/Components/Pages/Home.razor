@page "/"
@using System.Drawing
@using System.Text.Json
@using Community.Blazor.MapLibre.Models
@using Community.Blazor.MapLibre.Models.Camera
@using Community.Blazor.MapLibre.Models.Control
@using Community.Blazor.MapLibre.Models.Feature
@using Community.Blazor.MapLibre.Models.Layers
@using Community.Blazor.MapLibre.Models.Marker
@using Community.Blazor.MapLibre.Models.Sources
@using LayerHub.Shared.Dto
@using LayerHub.Shared.Dto.MapFeature
@using LayerHub.Web.Application.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject IHttpService HttpService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Home</PageTitle>


<MapLibre @ref="Map" Options="_mapOptions" Class="rounded-top"
          Height="100vh" @rendermode="InteractiveServer" OnLoad="OnMapLoad"/>

@code
{
    private MapLibre Map { get; set; } = new MapLibre();
    private bool _isAuthenticated = false;
    
    private readonly MapOptions _mapOptions = new()
    {
        Container = "UniqueMapId",
        Style = "https://tiles.openfreemap.org/styles/liberty",
        Center = new LngLat()
        {
            Latitude = 0, 
            Longitude = 0
        },
        Zoom = 5, // Start with a default zoom level
        Pitch = 0
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private async Task OnMapLoad(EventArgs obj)
    {
        await Map.AddControl(ControlType.FullscreenControl, ControlPosition.TopLeft);
        await Map.AddControl(ControlType.ScaleControl, ControlPosition.TopLeft);
        await Map.AddControl(ControlType.NavigationControl, ControlPosition.TopLeft);
        
        if (_isAuthenticated)
        {
            await LoadAuthenticatedMapData();
        }
        else
        {
            await LoadGlobeWithRandomPoints();
        }
    }
    
    private async Task LoadAuthenticatedMapData()
    {
        var mapFeatures = (await HttpService.Get<PaginatedListDto<MapFeatureDto>>("/Feature?Page=1&ItemsPerPage=500&SortOrder=0"))
            .Items.Select(mf => new FeatureFeature()
            {
                Geometry = JsonSerializer.Deserialize<IGeometry>(mf.GeometryJson)
            }).ToList();

        await Map.AddSource("all", new GeoJsonSource()
        {
            Data = new FeatureCollection()
            {
                Features = new List<IFeature>(mapFeatures)
            }
        });
        
        await Map.AddLayer(new FillLayer()
        {
            Id = "GeoJsonLayerId",
            Source = "all",
            Paint = new FillLayerPaint()
            {
                FillColor = "#088",
                FillOpacity = 0.8
            }
        });

        await Map.AddMarker(new MarkerOptions(), new LngLat()
        {
            Latitude = 48.725837,
            Longitude = 18.752835
        });

        // If we have features, fit the map to show all of them
        if (mapFeatures.Any())
        {
            try
            {
                // Calculate bounds from all features
                double minLng = double.MaxValue;
                double maxLng = double.MinValue;
                double minLat = double.MaxValue;
                double maxLat = double.MinValue;

                foreach (var feature in mapFeatures)
                {
                    // Handle different geometry types
                    if (feature.Geometry is PointGeometry point)
                    {
                        var coordinates = point.Coordinates;
                        UpdateBounds(coordinates[0], coordinates[1]);
                    }
                    else if (feature.Geometry is PolygonGeometry polygon)
                    {
                        foreach (var ring in polygon.Coordinates)
                        {
                            foreach (var coord in ring)
                            {
                                UpdateBounds(coord[0], coord[1]);
                            }
                        }
                    }
                    // Add more geometry types if needed
                }

                // Local function to update bounds
                void UpdateBounds(double lng, double lat)
                {
                    minLng = Math.Min(minLng, lng);
                    maxLng = Math.Max(maxLng, lng);
                    minLat = Math.Min(minLat, lat);
                    maxLat = Math.Max(maxLat, lat);
                }

                // Create bounds object and fit map to bounds with padding
                var bounds = new LngLatBounds
                {
                    Southwest = new LngLat { Longitude = minLng, Latitude = minLat },
                    Northeast = new LngLat { Longitude = maxLng, Latitude = maxLat }
                };

                // Apply FitBounds with padding to ensure all features are visible
                await Map.FitBounds(bounds, new FitBoundOptions 
                { 
                    Padding = 50,
                    MaxZoom = 16 // Limit max zoom level
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error calculating bounds: {ex.Message}");
                // Fallback to default view if bounds calculation fails
            }
        }
    }
    
    private async Task LoadGlobeWithRandomPoints()
    {
        // Set globe projection
        await Map.SetProjection(new ProjectionSpecification()
        {
            Type = "globe"
        });
        
        // Generate random points on the globe
        var random = new Random();
        var features = new List<IFeature>();
        
        // Create 100 random points around the world
        for (int i = 0; i < 100; i++)
        {
            // Random latitude (-85 to 85) and longitude (-180 to 180)
            double lat = (random.NextDouble() * 170) - 85;
            double lng = (random.NextDouble() * 360) - 180;
            
            features.Add(new FeatureFeature
            {
                Geometry = new PointGeometry()
                {
                    Coordinates = new [] { lng, lat }
                },
                Properties = new Dictionary<string, object>
                {
                    { "id", i },
                    { "name", $"Random Point {i}" }
                }
            });
        }
        
        // Add the points to the map
        await Map.AddSource("random-points", new GeoJsonSource
        {
            Data = new FeatureCollection
            {
                Features = features
            }
        });
        
        // Add a circle layer to display the points
        await Map.AddLayer(new CircleLayer
        {
            Id = "random-points-layer",
            Source = "random-points",
            Paint = new CircleLayerPaint
            {
                CircleRadius = 5,
                CircleColor = "#ff0000",
                CircleOpacity = 0.7
            }
        });
    }
}

