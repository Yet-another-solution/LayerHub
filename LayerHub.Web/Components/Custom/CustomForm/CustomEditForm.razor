@namespace LayerHub.Web.Components.Custom.CustomForm

@typeparam T

@inherits CustomComponentBase

@using Blazored.Toast.Services
@using LayerHub.Web.Application.Services
@inject IHttpService HttpService
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<EditForm Model="@Object" class="form" OnValidSubmit="SubmitForm">
    <FluentValidationValidator/>
    @ChildContent
    <ValidationSummary />
    <div class="d-flex mt-3 gap-3">
        <button class="btn btn-primary w-100">
            <i class="bi bi-floppy"></i>
            Save
        </button>
        <button class="btn btn-danger w-100" disabled="disabled">
            <i class="bi bi-trash3"></i>
            Delete
        </button>
    </div>
</EditForm>

@code {
    /// <summary>
    /// Sets the object to be edited.
    /// </summary>
    [Parameter]
    public required object Object { get; set; }
    
    /// <summary>
    /// Url to put the form to.
    /// </summary>
    [Parameter]
    public required string PutUrl { get; set; }
    
    /// <summary>
    /// Gets or sets the content to be rendered inside the component.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private bool _trapFocus = true;
    private bool _modal = true;
    private bool _hidden = true;

    public async Task SubmitForm()
    {
        try{
            await HttpService.Put<T>($"{PutUrl}", Object);
            ToastService.ShowSuccess("Edit successful");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Edit failed: {ex.Message}");
        }
    }

    public async Task DeleteObject() 
    {
        await HttpService.Delete($"{PutUrl}", Object);
        ToastService.ShowSuccess($"Delete successful");
        await Task.Delay(1000);
        await JsRuntime.InvokeVoidAsync("history.back");
    }
}