@inject IJSRuntime JsRuntime
@inject IHttpService HttpService

@using LayerHub.Shared.Dto
@using LayerHub.Shared.Utils
@using LayerHub.Web.Application.Services
@typeparam TItem

<div class="btn-group w-100 simple-dropdown @(Class ?? "")" style="@(Style ?? "")">
    <button class="btn dropdown-toggle w-100 text-start d-flex flex-row align-items-center" type="button" id="dropdownMenuButton" 
            style="border-color: var(--bs-border-color); min-height: 38px;" data-bs-toggle="dropdown" 
            aria-expanded="false" data-bs-auto-close="@(IsMultiSelect ? "outside" : "true")">
        <div class="selected-items-container d-flex flex-grow-1 align-items-center overflow-hidden">
            @if (SelectedOptions.Count == 0)
            {
                <span class="text-truncate">@DefaultText</span>
            }
            else if (SelectedOptionsRenderer == null)
            {
                @if (IsMultiSelect)
                {
                    <div class="text-truncate">@string.Join(", ", SelectedOptions.Select(StringSelector))</div>
                }
                else
                {
                    <span class="text-truncate">@StringSelector(SelectedOptions.FirstOrDefault())</span>
                }
            }
            else
            {
                <div class="selected-items-wrapper d-flex flex-row flex-nowrap overflow-hidden">
                    @SelectedOptionsRenderer(SelectedOptions)
                </div>
            }
        </div>
    </button>
    <div class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton" @ref="_dropdownMenuRef" @onwheel="OnScroll">
        @if (CanFilter)
        {
            <div class="filter-container">
                <div>
                    <input type="text" class="form-control" placeholder="Filter..." value="@_filterText" @oninput="HandleSearchInput"/>
                </div>
            </div>
        }

        @if (_isLoading && (IsPaginated && _paginatedOptions.Count == 0))
        {
            <div class="dropdown-item">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        }
        else
        {
            @if (Virtualize)
            {
                <Virtualize Items="_paginatedOptions.ToList()" Context="option">
                    @RenderItem(option)
                </Virtualize>
            }
            else
            {
                foreach (var option in _paginatedOptions)
                {
                    @RenderItem(option)
                }
            }
        }
        
        @if (_isLoading && (IsPaginated && _paginatedOptions.Count > 0))
        {
            <div class="dropdown-item">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .selected-items-container {
        max-width: calc(100% - 20px);
    }
    
    .selected-items-wrapper {
        max-width: 100%;
        flex-wrap: nowrap;
        overflow-x: hidden;
    }
    
    .selected-items-wrapper .badge {
        flex-shrink: 0;
        white-space: nowrap;
        max-width: 100px;
        text-overflow: ellipsis;
        overflow: hidden;
    }
</style>

@code {
    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public IEnumerable<TItem> Options { get; set; } = new List<TItem>();

    [Parameter]
    public List<TItem> SelectedOptions { get; set; } = new List<TItem>();

    [Parameter]
    public EventCallback<List<TItem>> SelectedOptionsChanged { get; set; }

    [Parameter]
    public bool IsMultiSelect { get; set; } = true;

    [Parameter]
    public bool CanFilter { get; set; } = true;

    [Parameter]
    public Func<TItem, string> StringSelector { get; set; } = item => item?.ToString() ?? string.Empty;

    [Parameter]
    public string DefaultText { get; set; } = "Select...";

    [Parameter]
    public Func<TItem, string, bool>? FilterPredicate { get; set; }

    [Parameter]
    public bool Virtualize { get; set; } = false;

    [Parameter]
    public RenderFragment<List<TItem>>? SelectedOptionsRenderer { get; set; }

    [Parameter]
    public RenderFragment<TItem>? Option { get; set; }

    // Pagination parameters
    [Parameter]
    public bool IsPaginated { get; set; } = false;

    [Parameter]
    public string ApiUrl { get; set; } = string.Empty;

    [Parameter]
    public string AdditionalParams { get; set; } = string.Empty;

    [Parameter]
    public Func<TItem, string> IdSelector { get; set; } = item => item?.ToString() ?? string.Empty;

    private string _filterText = "";
    private ElementReference _dropdownMenuRef;
    private BasePaginator _paginator = new();
    private List<TItem> _paginatedOptions = new();
    private int _totalPages = 1;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (IsPaginated)
        {
            await LoadPaginatedData();
        }
        else
        {
            _paginatedOptions = Options.ToList();
        }
    }

    private bool DefaultFilterPredicate(TItem item, string filterText)
    {
        if (string.IsNullOrEmpty(filterText)) return true;
        var itemString = StringSelector(item);
        return itemString.Contains(filterText, StringComparison.OrdinalIgnoreCase);
    }

    private bool IsOptionSelected(TItem option)
    {
        return SelectedOptions.Contains(option);
    }

    private async Task ToggleOption(TItem option)
    {
        if (!IsMultiSelect)
        {
            SelectedOptions.Clear();
            SelectedOptions.Add(option);
            await SelectedOptionsChanged.InvokeAsync(SelectedOptions);
            
            // Auto-close dropdown for single select
            await JsRuntime.InvokeVoidAsync("closeDropdown", "dropdownMenuButton");
            return;
        }
        
        if (SelectedOptions.Contains(option))
        {
            SelectedOptions.Remove(option);
        }
        else
        {
            SelectedOptions.Add(option);
        }

        await SelectedOptionsChanged.InvokeAsync(SelectedOptions);
    }

    // Modify the RenderItem to render differently based on IsMultiSelect
    private RenderFragment<TItem> RenderItem => item =>
        @<div class="dropdown-item" @onclick="() => ToggleOption(item)">
            @if (IsMultiSelect)
            {
                <label @onclick:stopPropagation="true" class="d-flex align-items-center">
                    <input type="checkbox" class="form-check me-2 d-inline-block" checked="@IsOptionSelected(item)" @onchange="() => ToggleOption(item)"/>
                    @if (Option != null)
                    {
                        @Option(item)
                    }
                    else
                    {
                        @StringSelector(item)
                    }
                </label>
            }
            else
            {
                <div class="d-flex align-items-center @(IsOptionSelected(item) ? "active" : "")">
                    @if (Option != null)
                    {
                        @Option(item)
                    }
                    else
                    {
                        @StringSelector(item)
                    }
                </div>
            }
        </div>;

    private async Task LoadPaginatedData()
    {
        if (!IsPaginated || string.IsNullOrEmpty(ApiUrl))
            return;
            
        _isLoading = true;
        StateHasChanged();
        
        try
        {
            _paginator.Query = _filterText;
            var queryParams = $"{_paginator.GetAsParams()}&{AdditionalParams}";
            var response = await HttpService.Get<PaginatedListDto<TItem>>($"{ApiUrl}?{queryParams}");
            
            if (response != null)
            {
                if (_paginator.Page == 1)
                    _paginatedOptions.Clear();
                    
                _paginatedOptions.AddRange(response.Items);
                _totalPages = response.TotalPages;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading paginated data: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnScroll(WheelEventArgs e)
    {
        if (!IsPaginated || _isLoading || _paginator.Page >= _totalPages)
            return;
            
        // Check if scrolled to the bottom
        var scrollHeight = await JsRuntime.InvokeAsync<int>("getScrollHeight", _dropdownMenuRef);
        var clientHeight = await JsRuntime.InvokeAsync<int>("getClientHeight", _dropdownMenuRef);
        var scrollTop = await JsRuntime.InvokeAsync<int>("getScrollTop", _dropdownMenuRef);

        if (scrollTop + clientHeight >= scrollHeight - 10)
        {
            _paginator.Page++;
            await LoadPaginatedData();
        }
    }

    private async Task HandleSearchInput(ChangeEventArgs e)
    {
        _filterText = e.Value?.ToString() ?? "";
        
        if (IsPaginated)
        {
            _paginator.Page = 1;
            await LoadPaginatedData();
        }
        else
        {
            // Filter the non-paginated options
            if (string.IsNullOrEmpty(_filterText))
            {
                _paginatedOptions = Options.ToList();
            }
            else
            {
                var predicate = FilterPredicate ?? DefaultFilterPredicate;
                _paginatedOptions = Options.Where(opt => predicate(opt, _filterText)).ToList();
            }
            
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        if (!IsPaginated)
        {
            // Filter the options if there's a filter text
            if (string.IsNullOrEmpty(_filterText))
            {
                _paginatedOptions = Options.ToList();
            }
            else
            {
                var predicate = FilterPredicate ?? DefaultFilterPredicate;
                _paginatedOptions = Options.Where(opt => predicate(opt, _filterText)).ToList();
            }
        }

        base.OnParametersSet();
    }
}